
h1. Ch06 함수


함수란 자주 사용하는 코드들의 집합을 의미합니다. 또한 정의된 기능만을 전담하여 처리하는 독립된 작은 부속 프로그램이라고 할 수 있습니다.


함수를 사용하는 이유: 재사용성이 좋아지고 유지보수가 편리해지며 가독성이 향상됩니다.


매개변수: 함수안에서 쓰일 데이터를 입력 받는 역할을 하는 변수

인수: 함수를 호출할 때 전달하는 입력값


함수의 기본구조


<pre><code class="python">

def 함수이름(): # 함수 정의하기

<수행할 문장1>

<수행할 문장2>

...


함수이름() # 함수 호출하기

</code></pre>


매개변수가 있는 함수의 기본구조


<pre><code class="python">

def 함수이름(매개변수1, 매개변수2): # 함수 정의하기

<수행할 문장1>

<수행할 문장2>

...


함수이름(인수1, 인수2) # 함수 호출하기

</code></pre>


반환값이 있는 함수의 기본구조


<pre><code class="python">

def 함수이름(): # 함수 정의하기

<수행할 문장1>

<수행할 문장2>

...

return 반환값 # 위치 상관없음


함수이름() # 함수 호출하기

</code></pre>


매개변수와 반환 값이 있는 함수의 기본구조


<pre><code class="python">

def 함수이름(매개변수1, 매개변수2): # 함수 정의하기

<수행할 문장1>

<수행할 문장2>

...

return 반환값 # 위치 상관없음


함수이름(인수1, 인수2) # 함수 호출하기

</code></pre>


h1. Ch06 함수


함수란 자주 사용하는 코드들의 집합을 의미합니다. 또한 정의된 기능만을 전담하여 처리하는 독립된 작은 부속 프로그램이라고 할 수 있습니다.


함수를 사용하는 이유: 재사용성이 좋아지고 유지보수가 편리해지며 가독성이 향상됩니다.


매개변수: 함수안에서 쓰일 데이터를 입력 받는 역할을 하는 변수

인수: 함수를 호출할 때 전달하는 입력값


함수의 기본구조


<pre><code class="python">

def 함수이름(): # 함수 정의하기

<수행할 문장1>

<수행할 문장2>

...


함수이름() # 함수 호출하기

</code></pre>


매개변수가 있는 함수의 기본구조


<pre><code class="python">

def 함수이름(매개변수1, 매개변수2): # 함수 정의하기

<수행할 문장1>

<수행할 문장2>

...


함수이름(인수1, 인수2) # 함수 호출하기

</code></pre>


반환값이 있는 함수의 기본구조


<pre><code class="python">

def 함수이름(): # 함수 정의하기

<수행할 문장1>

<수행할 문장2>

...

return 반환값 # 위치 상관없음


함수이름() # 함수 호출하기

</code></pre>


매개변수와 반환 값이 있는 함수의 기본구조


<pre><code class="python">

def 함수이름(매개변수1, 매개변수2): # 함수 정의하기

<수행할 문장1>

<수행할 문장2>

...

return 반환값 # 위치 상관없음


함수이름(인수1, 인수2) # 함수 호출하기

</code></pre>


h1. Ch08 클래스


h3. 클래스


*클래스* 는 객체를 표현하기 위한 문법입니다. 클래스는 class에 클래스 이름을 지정하고 :(콜론)을 붙인 뒤 다음 줄부터 def로 메서드를 작성합니다.

메서드는 클래스 안에 들어있는 함수를 뜻합니다.


클래스의 기본구조


<pre><code class="python">

class 클래스이름: # 클래스 만들기

def 메서드(self): # 메서드 만들기

코드

</code></pre>


클래스는 ()(괄호)를 붙인 뒤 변수에 할당하여 인스턴스(객체)를 만듭니다. 그리고 인스턴스 뒤에 .(점)을 붙여서 메서드를 호출합니다.


<pre><code class="python">

인스턴스 = 클래스() # 인스턴스(객체) 만들기

인스턴스.메서드() # 인스턴스로 메서드 호출

</code></pre>


> 파이썬에서는 자료형도 클래스이다.

> self는 매개변수가 아니다. self는 인스턴스 자기자신을 의미한다.


h3. 생성자


__init__: 인스턴스를 만들 때 반드시 호출되는 메서드, 가장 먼저 호출되는 메서드

인스턴스 = 클래스 이름(매개변수1, 2, 3) < 이시점에 인스턴스가 생성된다.


h3. 상속


클래스 상속은 물려받은 기능(속성, 메서드)을 유지한 채로 다른 기능을 추가할 때 사용합니다. 클래스들의 중복된 코드를 제거하고 유지보수를 편하게 하기위해 사용합니다.

기능을 물려주는 클래스를 부모 클래스, 상속을 받아 새롭게 만드는 클래스를 자식 클래스라고 합니다. 상속은 클래스를 만들 때 ( )(괄호)를 붙이고 괄호 안에 부모 클래스 이름을 넣어줍니다.


<pre><code class="python">

class 부모클래스이름:

코드


class 자식클래스이름(부모클래스이름): # 부모 클래스를 상속받음

코드

</code></pre>


부모 클래스의 속성에 접근하거나 메서드를 호출할 때는 super() 뒤에 .을 붙여서 사용합니다. 또는, super(자식클래스, self) 형식으로 사용할 수도 있습니다.


<pre><code class="python">

class 부모클래스이름:

def __init__(self):

self.속성 = 값


class 자식클래스이름(부모클래스이름):

def __init__(self):

super().__init__() # super()로 부모 클래스의 메서드 호출

super().속성 # super()로 부모 클래스의 속성에 접근

super(자식클래스, self).속성 # super에 자식 클래스와 self를 넣는 형식

</code></pre>


h3. 메서드 오버라이딩


자식 클래스에서 부모 클레스의 메서드를 새로 재정의하는 것을 메서드 오버라이딩이라고 합니다.

메서드 오버라이딩은 원래 기능을 유지하면서 새로운 기능을 덧붙일 때, 프로그램에서 어떤 기능이 같은 메서드 이름으로 계속 사용되어야 할 때 활용합니다.

메서드 오버라이딩은 자식 클래스에서 메서드를 정의할 때 부모 클래스의 메서드 이름과 똑같이 만들어 줍니다.


<pre><code class="python">

class Person:

def greeting(self):

pass


class Student(Person):

def greeting(self): # 메서드 오버라이딩

super().greeting() # super()로 부모 클래스의 메서드 호출


james = Student()

james.greeting() # Student의 greeting 메서드가 호출 됨

</code></pre>


h1. Ch09 모듈과 패키지


h3. 모듈


모듈이란 함수나 변수 또는 클래스를 모아 놓은 파일입니다. 다른 파이썬 프로그램에서 불러와 사용할 수 있게끔 만든 파이썬 파일이라고도 할 수 있습니다.

다른 사람들이 이미 만들어 놓은 모듈을 사용할 수도 있고 직접 만들어서 사용할 수도 있습니다.

모듈을 사용하는 이유는 프로그램을 기능별로 파일으로 나누어서 유지보수 등 관리가 편해진다는 장점이 있습니다.


파이썬 모듈 사용방법


* 모듈은 import 모듈 형식으로 가져오며 모듈.변수, 모듈.함수(), 모듈.클래스() 형식으로 사용합니다.

* 또한, import 패키지.모듈 형식으로 패키지의 모듈도 가져올 수 있으며 패키지.모듈.변수, 패키지.모듈.함수(), 패키지.모듈.클래스() 형식으로 사용합니다.


파이썬 외부 모듈 사용방법


* 파이썬 패키지 인덱스(PyPI)에서 패키지를 다운로드하여 설치할 때는 pip install 패키지 형식으로 사용합니다. 또는, python에 -m 옵션을 지정하여 pip를 실행할 수도 있습니다.

* pip install로 설치한 패키지는 import 패키지 또는 import 패키지.모듈 형식으로 사용할 수 있습니다.


모듈 만들기

* 모듈은 .py 파일 안에 변수, 함수, 클래스를 넣어서 만들며 스크립트 파일에서 확장자 .py를 제외하면 모듈 이름이 됩니다.


<pre><code class="python">

# 모듈.py


변수 = 값


def 함수이름():

코드


class 클래스이름:

코드

</code></pre>


<pre><code class="python">

import 모듈 # 모듈을 가져옴. 스크립트 파일에서 확장자 .py를 제외하면 모듈 이름이 됨

모듈.변수 # 모듈의 변수 사용

모듈.함수() # 모듈의 함수 사용

모듈.클래스() # 모듈의 클래스 사용

</code></pre>


> if __name__ = "__main__"

> 해당 파일을 직접 실행할 때만 사용


h3. 패키지


패키지란 패키지는 도트(.)를 사용하여 파이썬 모듈을 계층적(디렉터리 구조)으로 관리할 수 있게 해줍니다.

예를 들어 모듈 이름이 A.B인 경우에 A는 패키지 이름이 되고 B는 A 패키지의 B모듈이 됩니다.

﻿
